In Java, HashMap is part of the Java Collections Framework and is found in the java.util package. It provides the basic implementation of the Map interface in Java. HashMap stores data in (key, value) pairs.
Each key is associated with a value, and you can access the value by using the corresponding key.

Internally uses Hashing (similar to Hashtable in Java).
Not synchronized (unlike Hashtable in Java) and hence faster for most of the cases.
Allows to store the null keys as well, but there should be only one null key object, and there can be any number of null values.
Duplicate keys are not allowed in HashMap, if you try to insert the duplicate key, it will replace the existing value of the corresponding key. 
HashMap uses keys in the same way as an Array uses an index.
HashMap allows for efficient key-based retrieval, insertion, and removal with an average O(1) time complexity.


1. Create a HashMap---------
HashMap<String, Integer> hashMap = new HashMap<>();

2. HashMap(int initialCapacity)---------
It creates a HashMap instance with a specified initial capacity 
HashMap<Integer, String> hm1 = new HashMap<>(10);

3. 3. HashMap(int initialCapacity, float loadFactor)
It creates a HashMap instance with a specified initial capacity and specified load factor.
HashMap<Integer, String> hm1 = new HashMap<>(5, 0.75f);

4. HashMap(Map map)
It creates an instance of HashMap with the same mappings as the specified map.
 Map<Integer, String> hm1 = new HashMap<>();


Method------->
1. Add Elements using put method
  hm1.put(1, "Geeks");

2. Changing Elements in HashMap in Java
hm.put(2, "Geeks");
hm.put(3, "Geeks");
hm.put(2, "For");

3. Removing Element from Java HashMap
To remove an element from the Map, we can use the remove() method. This method takes the key value and removes the mapping for a key from this map if it is present in the map.
hm.put(3, "Geeks");
hm.put(4, "For");
hm.remove(4);

4. Traversal of Java HashMap-------

HashMap<String, Integer> map = new HashMap<>();

 // Add elements using put method
   map.put("vishal", 10);
   map.put("sachin", 30);
   map.put("vaibhav", 20);
// for-each loop
   for (Map.Entry<String, Integer> e : map.entrySet())
      System.out.println("Key: " + e.getKey()
                               + " Value: " + e.getValue());


5.containsKey(Object key)
Returns true if this map contains a mapping for the specified key.

6.containsValue(Object value)
Returns true if this map maps one or more keys to the specified value.

7. entrySet()
Returns a Set view of the mappings contained in this map.

8.get(Object key)
Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.

9.isEmpty()
Returns true if this map contains no key-value mappings.

10. keySet()
Returns a Set view of the keys contained in this map.

11.size()
Returns the number of key-value mappings in this map.

12. values()
Returns a Collection view of the values contained in this map.

13.getOrDefault(Object key, V defaultValue)
Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.

14.putIfAbsent(K key, V value)
If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.
